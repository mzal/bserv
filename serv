#!/bin/bash


load_config() {
#loads configuration file at config.sh or creates a default one and a default 404 page if they don't exist
    if [[ ! -f "config.sh" ]]; then
        if [[ ! -f "404.html" ]]; then
            { cat > 404.html <<EOF
<!DOCTYPE html>
<html>
    <head>
        <title>Not found</title>
    </head>
    <body>
        <h1>Resource not found</h1>
    </body>
</html>
EOF
            }
        fi
        { cat > config.sh <<EOF
#server port
port=1234
#root directory
root_path="./web/"
#name for the server
server_name="bserv"
#404 page location
not_found_page="404.html"
#request parameters log files
get_log_file="get_log"
post_log_file="post_log"
#files forbidden from access
forbidden_files=("serv config.sh \$get_log_file \$post_log_file")
#rewriting paths to resources
declare -A REWRITE=( [/]=/index.html )
EOF
        }
    fi
}

usage() {
    echo "Usage: $0 [-h] [-r web_root]" 1>&2
    exit 0
}

read_request() {
    read request_text
}

declare -A REQUEST
parse_request() {
    #parses the request text to associative table and changes the resource according to REWRITE and creates a path to resource
    REQUEST[resource]=$(echo $request_text | cut -d " " -f 2 | cut -d "?" -f 1)
    for path in ${!REWRITE[@]}; do
        if [[ "${REQUEST[resource]}" == $path ]]; then
            REQUEST[resource]=${REWRITE[$path]}
            break
        fi
    done
    REQUEST[resource]=$(echo ${REQUEST[resource]} | sed -e s#/#$root_path#)
    REQUEST[method]=$(echo $request_text | cut -d " " -f 1) 
    if [[ ${REQUEST[method]} == "GET" ]]; then
        parse_get_params
    else
        not_implemented_error=1
    fi
}

parse_get_params() {
    #parses parameters given in GET request
    if [[ $request_text == *"?"* ]]; then
        declare -A GET
        get_params=$(echo $request_text | cut -d " " -f 2 | cut -d "?" -f 2 | tr "&" "\n")
        for param in $get_params; do
            GET[$(echo $param | cut -d "=" -f 1)]=$(echo $param | cut -d "=" -f 2)
        done
        handle_get_params
    fi
}

handle_get_params() {
    #logs GET parameters to log file
    echo "" >> $get_log_file
    for key in "${!GET[@]}"; do
        echo -e "$key : ${GET[$key]}" >> $get_log_file
    done
}

construct_response_headers() {
    #creates response headers and checks wheather the requested resource exists (file_found flag)
    if [[ $not_implemented_error -eq 1 ]]; then
        response_text="HTTP/1.1 501 Not Implemented \n"
        response_text="\nMethod not implemented"
    else
        if [[ -f ${REQUEST[resource]} ]]; then
            response_text="HTTP/1.1 200 OK\n"
            response_text+="Connection: Keep-Alive\n"
            response_text+="Content-Length: $(stat -c'%s' ${REQUEST[resource]})\n"
            if [[ $(echo ${REQUEST[resource]##*.}) == "css" ]]; then
                response_text+="Content-Type: text/css\n"
            elif [[ $(echo ${REQUEST[resource]##*.}) == "js" ]]; then
                response_text+="Content-Type: text/javascript\n"
            else
                response_text+="Content-Type: $(file -b --mime-type ${REQUEST[resource]})\n"
            fi
            response_text+="Date: $(date)\n"
            response_text+="Server: $server_name\n"
            #response_text+="\n"
            #response_text+=$(tr -d '\0' <${REQUEST[resource]})
            file_found=1
        else
            response_text="HTTP/1.1 404 Not found\n"
            response_text+="Date: $(date)\n"
            response_text+="Content-Type: text/html\n"
            #response_text+=$(tr -d '\0' <$not_found_page)
            file_found=0
        fi 
    fi
}

send_response() {
    #echoes the response headers and the resources content
    echo -e $response_text
    if [[ $not_implemented_error -ne 1 ]]; then
        if [[ $file_found -eq 1 ]]; then
            filename=${REQUEST[resource]};
        else
            filename=$not_found_page;
        fi

        while read line; do
            echo "$line"
        done < $filename
    fi
}

load_config
source $(dirname $0)/config.sh

while getopts ":hr:" opt; do
    case $opt in
        r)
            #change root directory of served files
            root_path=$OPTARG
            ;;
        h | *)
            #display help
            usage
            exit 0
            ;;
    esac
done

read_request
parse_request
construct_response_headers
send_response
